<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dreammilk.now.sh</id>
    <title>Milk &apos;s Home</title>
    <updated>2020-06-03T08:01:44.495Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dreammilk.now.sh"/>
    <link rel="self" href="https://dreammilk.now.sh/atom.xml"/>
    <subtitle>welcome</subtitle>
    <logo>https://dreammilk.now.sh/images/avatar.png</logo>
    <icon>https://dreammilk.now.sh/favicon.ico</icon>
    <rights>All rights reserved 2020, Milk &apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[1067 试密码 (20分)]]></title>
        <id>https://dreammilk.now.sh/1067-shi-mi-ma-20-fen/</id>
        <link href="https://dreammilk.now.sh/1067-shi-mi-ma-20-fen/">
        </link>
        <updated>2020-06-03T04:50:48.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入在第一行给出一个密码（长度不超过 20 的、不包含空格、Tab、回车的非空字符串）和一个正整数 N（≤ 10），分别是正确的密码和系统允许尝试的次数。随后每行给出一个以回车结束的非空字符串，是用户尝试输入的密码。输入保证至少有一次尝试。当读到一行只有单个 # 字符时，输入结束，并且这一行不是用户的输入。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>对用户的每个输入，如果是正确的密码且尝试次数不超过 N，则在一行中输出 <code>Welcome in</code>，并结束程序；如果是错误的，则在一行中按格式输出 <code>Wrong password: 用户输入的错误密码</code>；当错误尝试达到 N 次时，再输出一行 <code>Account locked</code>，并结束程序。</p>
</blockquote>
<h3 id="输入样例1">输入样例1：</h3>
<pre><code class="language-in">Correct%pw 3
correct%pw
Correct@PW
whatisthepassword!
Correct%pw
#
</code></pre>
<h3 id="输出样例1">输出样例1：</h3>
<pre><code class="language-out">Wrong password: correct%pw
Wrong password: Correct@PW
Wrong password: whatisthepassword!
Account locked
</code></pre>
<h3 id="输入样例2">输入样例2：</h3>
<pre><code class="language-in">cool@gplt 3
coolman@gplt
coollady@gplt
cool@gplt
try again
#
</code></pre>
<h3 id="输出样例2">输出样例2：</h3>
<pre><code class="language-out">Wrong password: coolman@gplt
Wrong password: coollady@gplt
Welcome in
</code></pre>
<h3 id="思路">思路：</h3>
<p>感觉题目相对比较简单：</p>
<blockquote>
<p>循环输入的字符串，遇到<code>#</code>结束、超过错误次数结束或者输入正确后结束</p>
<p>关于字符串可以直接通过<code>==</code>比较，每次输入错误时，计数加一</p>
</blockquote>
<p>一个小坑记录：</p>
<blockquote>
<p>在使用<code>getline</code>函数时，需要注意前面是否存在回车符号，如果有，需要使用<code>getchar</code>函数吃掉回车</p>
<p>在网上百度了一下，发现<code>scanf(&quot;\n&quot;)</code>与<code>getchar</code>函数在消除回车时的效果并不一样</p>
<p><code>scanf(&quot;\n&quot;)</code>有时候消除回车时并不彻底，而<code>getchar</code>函数的表现更胜一筹</p>
</blockquote>
<p>哪天有时间可以总结一下这些细枝末节🤓</p>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include&lt;iostream&gt;

using namespace std;

int main() {
    string psd,input;
    int n,cnt=0;
    cin &gt;&gt; psd &gt;&gt; n;
    getchar();
    getline(cin,input);
    while(input!=&quot;#&quot; &amp;&amp; cnt&lt;n){
        if(input != psd){
            cnt++;
            cout &lt;&lt; &quot;Wrong password: &quot; &lt;&lt; input &lt;&lt; endl;
        }else{
            cout &lt;&lt; &quot;Welcome in&quot;;
            break;
        }
        getline(cin,input);
    }
    if(cnt == n) cout &lt;&lt; &quot;Account locked&quot;;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1066 图像过滤 (15分)]]></title>
        <id>https://dreammilk.now.sh/1066-tu-xiang-guo-lu-15-fen/</id>
        <link href="https://dreammilk.now.sh/1066-tu-xiang-guo-lu-15-fen/">
        </link>
        <updated>2020-06-02T04:39:19.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像素颜色都用一种指定的颜色替换。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像素颜色都用一种指定的颜色替换。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入在第一行给出一幅图像的分辨率，即两个正整数 <em>M</em> 和 <em>N</em>（0&lt;<em>M</em>,<em>N</em>≤500），另外是待过滤的灰度值区间端点 <em>A</em> 和 <em>B</em>（0≤<em>A</em>&lt;<em>B</em>≤255）、以及指定的替换灰度值。随后 <em>M</em> 行，每行给出 <em>N</em> 个像素点的灰度值，其间以空格分隔。所有灰度值都在 [0, 255] 区间内。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>输出按要求过滤后的图像。即输出 <em>M</em> 行，每行 <em>N</em> 个像素灰度值，每个灰度值占 3 位（例如黑色要显示为 <code>000</code>），其间以一个空格分隔。行首尾不得有多余空格。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">3 5 100 150 0
3 189 254 101 119
150 233 151 99 100
88 123 149 0 255
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">003 189 254 000 000
000 233 151 099 000
088 000 000 000 255
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目比较容易：</p>
<blockquote>
<p>遍历二维数组，如果在过滤范围内，替换即可</p>
</blockquote>
<p>输出时使用<code>%03d</code>即可</p>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include&lt;iostream&gt;

using namespace std;

int main() {
    int m,n,a,b,g;
    scanf(&quot;%d%d%d%d%d&quot;,&amp;m,&amp;n,&amp;a,&amp;b,&amp;g);
    for(int i=0;i&lt;m;i++){
        for(int j=0;j&lt;n;j++){
            int color;scanf(&quot;%d&quot;,&amp;color);
            if(color&lt;a||color&gt;b) printf(&quot;%03d&quot;,color);
            else printf(&quot;%03d&quot;,g);
            if(j!=n-1) printf(&quot; &quot;);
        }
        printf(&quot;\n&quot;);
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1065 单身狗 (25分)]]></title>
        <id>https://dreammilk.now.sh/1065-dan-shen-gou-25-fen/</id>
        <link href="https://dreammilk.now.sh/1065-dan-shen-gou-25-fen/">
        </link>
        <updated>2020-06-01T04:59:54.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入第一行给出一个正整数 N（≤ 50 000），是已知夫妻/伴侣的对数；随后 N 行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（≤ 10 000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">3
11111 22222
33333 44444
55555 66666
7
55555 44444 10000 88888 22222 11111 23333
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">5
10000 23333 44444 55555 88888
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目寻找单身🐶，包括当时没有伴侣的人：</p>
<blockquote>
<p>首先说明变量：id数组用于保存伴侣关系，其中id数组默认值为-1（没有伴侣）；</p>
<p>visitor数组用于保存参与者id；</p>
<p>iscome数组用于保存是否到场的信息，默认为0（未到场）；</p>
<p>single数组用于保存单身人士id；</p>
</blockquote>
<p>再过一下运行流程：</p>
<blockquote>
<p>先将每一对伴侣信息存入id中，然后将每一个参与者的id存储<code>visitor</code>中，并判断参与者是否有伴侣关系，如果存在伴侣关系，则将该参与者的伴侣在iscome数组中变为1</p>
<p>这一步是为存在伴侣关系并且到场的人进行标记；比如a和b是伴侣，a到场b未到场，则<code>iscome[b]=1</code>，<code>iscome[a]=0</code>；这意味着当事人的伴侣不在场的话，当事人在<code>iscome</code>数组中永远为0</p>
<p>再循环visitor数组，判断iscome数组中值是否为0，如果为0说明该参与者是单身人士</p>
</blockquote>
<p>注意事项：</p>
<blockquote>
<p>对于id数组的默认值不能设为0，因为id可以为0</p>
<p>输出时记得使用格式化输出<code>%05d</code></p>
</blockquote>
<p>关于<code>iscome</code>数组，只有你的伴侣在场时，你的伴侣会将她（他）的伴侣（也就是你）置为1，证明你是一个有伴侣的人</p>
<p>相当于她（他）到场后会喊一嗓子：我是你的女（男）朋友</p>
<p>因为这个逻辑有点烧脑，容易混乱，所以有点啰嗦，希望能够写的通俗易懂一点</p>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;set&gt;

using namespace std;

int main() {
    int n;
    cin &gt;&gt; n;
    int id[100000]={-1};
    for(int i=0;i&lt;n;i++){
        int man,femal;
        cin &gt;&gt; man &gt;&gt; femal;
        id[man] = femal;
        id[femal] = man;
    }
    int num;cin &gt;&gt; num;
    vector&lt;int&gt; visitor(num);
    int iscome[100000]={0};
    for(int i=0;i&lt;num;i++){
        cin &gt;&gt; visitor[i];
        if(id[visitor[i]]!=-1) iscome[id[visitor[i]]] = 1;
    }
    set&lt;int&gt; single;
    for(int i=0;i&lt;num;i++){
        if(!iscome[visitor[i]]) single.insert(visitor[i]);
    }
    cout &lt;&lt; single.size() &lt;&lt; endl;
    for(auto it=single.begin();it!=single.end();it++){
        if(it==single.begin()) printf(&quot;%05d&quot;,*it);
        else printf(&quot; %05d&quot;,*it);
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1064 朋友数 (20分)]]></title>
        <id>https://dreammilk.now.sh/1064-peng-you-shu-20-fen/</id>
        <link href="https://dreammilk.now.sh/1064-peng-you-shu-20-fen/">
        </link>
        <updated>2020-05-31T04:11:29.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>如果两个整数各位数字的和是一样的，则被称为是“朋友数”，而那个公共的和就是它们的“朋友证号”。例如 123 和 51 就是朋友数，因为 1+2+3 = 5+1 = 6，而 6 就是它们的朋友证号。给定一些整数，要求你统计一下它们中有多少个不同的朋友证号。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>如果两个整数各位数字的和是一样的，则被称为是“朋友数”，而那个公共的和就是它们的“朋友证号”。例如 123 和 51 就是朋友数，因为 1+2+3 = 5+1 = 6，而 6 就是它们的朋友证号。给定一些整数，要求你统计一下它们中有多少个不同的朋友证号。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入第一行给出正整数 N。随后一行给出 N 个正整数，数字间以空格分隔。题目保证所有数字小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>首先第一行输出给定数字中不同的朋友证号的个数；随后一行按递增顺序输出这些朋友证号，数字间隔一个空格，且行末不得有多余空格。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">8
123 899 51 998 27 33 36 12
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">4
3 6 9 26
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目主要是关于朋友数的个数：</p>
<blockquote>
<p>只要能够想起set结构的特性，本题基本就迎刃而解了</p>
<p>遍历每一个数，将该数的朋友数填入set数组中</p>
<p>最后输出set结构的大小与元素即可</p>
</blockquote>
<p>set结构的元素无重复特性在解题需要去重时可以考虑一下😸</p>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;set&gt;

using namespace std;

int main() {
    int n;
    cin &gt;&gt; n;
    set&lt;int&gt; s;
    for(int i=0;i&lt;n;i++){
        int num,sum=0;
        cin &gt;&gt; num;
        while(num!=0){
            sum += num%10;
            num /= 10;
        }
        s.insert(sum);
    }
    cout &lt;&lt; s.size() &lt;&lt; endl;
    for(auto it=s.begin();it!=s.end();it++){
        if(it==s.begin()) cout &lt;&lt; *it;
        else cout &lt;&lt; ' ' &lt;&lt; *it;
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1063 计算谱半径 (20分)]]></title>
        <id>https://dreammilk.now.sh/1063-ji-suan-pu-ban-jing-20-fen/</id>
        <link href="https://dreammilk.now.sh/1063-ji-suan-pu-ban-jing-20-fen/">
        </link>
        <updated>2020-05-30T04:25:56.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 <em>n</em> 个复数空间的特征值 { <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mi>i</mi></mrow><annotation encoding="application/x-tex">a_1+b_1i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">i</span></span></span></span>,⋯,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>+</mo><msub><mi>b</mi><mi>n</mi></msub><mi>i</mi></mrow><annotation encoding="application/x-tex">a_n+b_ni</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">i</span></span></span></span> }，它们的模为实部与虚部的平方和的开方，而“谱半径”就是最大模。</p>
<p>现在给定一些复数空间的特征值，请你计算并输出这些特征值的谱半径。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 <em>n</em> 个复数空间的特征值 { <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mi>i</mi></mrow><annotation encoding="application/x-tex">a_1+b_1i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">i</span></span></span></span>,⋯,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>+</mo><msub><mi>b</mi><mi>n</mi></msub><mi>i</mi></mrow><annotation encoding="application/x-tex">a_n+b_ni</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">i</span></span></span></span> }，它们的模为实部与虚部的平方和的开方，而“谱半径”就是最大模。</p>
<p>现在给定一些复数空间的特征值，请你计算并输出这些特征值的谱半径。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入第一行给出正整数 N（≤ 10 000）是输入的特征值的个数。随后 N 行，每行给出 1 个特征值的实部和虚部，其间以空格分隔。注意：题目保证实部和虚部均为绝对值不超过 1000 的整数。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>在一行中输出谱半径，四舍五入保留小数点后 2 位。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">5
0 1
2 0
-1 0
3 3
0 -3
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">4.24
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目描述的比较高大上，实际比较简单：</p>
<blockquote>
<p>主要内容是在每行输入的两个数平方和的开方中寻找最大值</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cmath&gt;

using namespace std;

int main() {
    int n;float max_value=0;
    cin &gt;&gt; n;
    for(int i=0;i&lt;n;i++){
        float a,b;
        cin &gt;&gt; a &gt;&gt; b;
        if(sqrt(a*a+b*b) &gt; max_value) max_value=sqrt(a*a+b*b);
    }
    printf(&quot;%.2f&quot;, max_value);
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1062 最简分数 (20分)]]></title>
        <id>https://dreammilk.now.sh/1062-zui-jian-fen-shu-20-fen/</id>
        <link href="https://dreammilk.now.sh/1062-zui-jian-fen-shu-20-fen/">
        </link>
        <updated>2020-05-29T03:20:26.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>一个分数一般写成两个整数相除的形式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">N/M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>，其中 <em>M</em> 不为0。最简分数是指分子和分母没有公约数的分数表示形式。</p>
<p>现给定两个不相等的正分数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">N_1/M_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">N_2/M_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，要求你按从小到大的顺序列出它们之间分母为 <em>K</em> 的最简分数。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>一个分数一般写成两个整数相除的形式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">N/M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>，其中 <em>M</em> 不为0。最简分数是指分子和分母没有公约数的分数表示形式。</p>
<p>现给定两个不相等的正分数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">N_1/M_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">N_2/M_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，要求你按从小到大的顺序列出它们之间分母为 <em>K</em> 的最简分数。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入在一行中按 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">N/M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 的格式给出两个正分数，随后是一个正整数分母 <em>K</em>，其间以空格分隔。题目保证给出的所有整数都不超过 1000。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>在一行中按 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">N/M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 的格式列出两个给定分数之间分母为 <em>K</em> 的所有最简分数，按从小到大的顺序，其间以 1 个空格分隔。行首尾不得有多余空格。题目保证至少有 1 个输出。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">7/18 13/20 12
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">5/12 7/12
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目比较容易：</p>
<blockquote>
<p>整体是统计在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">N_1/M_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">N_2/M_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之间的A/K~B/K</p>
<p>并对每个n/K进行公约数检验，如果不存在公约数（公约数为1）</p>
<p>则符合最简分数要求</p>
</blockquote>
<p>需要注意的地方：</p>
<blockquote>
<p>对于输入的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">N_1/M_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">N_2/M_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>需要判断顺序是否正确，否则进行交换</p>
<p>分数的范围并不包括 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">N_1/M_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>2</mn></msub><mi mathvariant="normal">/</mi><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">N_2/M_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>两个数字</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

int gcd(int a,int b){
    return a%b==0?b:gcd(b,a%b);
}

int main() {
    int n1,m1,n2,m2,k;
    scanf(&quot;%d/%d %d/%d %d&quot;,&amp;n1,&amp;m1,&amp;n2,&amp;m2,&amp;k);
    if(n1*m2&gt;n2*m1) {swap(n1,n2);swap(m1,m2);}
    int i=1;bool flag=true;
    while(i*m1&lt;=n1*k) i++;
    while(i*m2&lt;k*n2){
        if(gcd(i,k)==1){
            !flag?printf(&quot; &quot;):flag=false;
            printf(&quot;%d/%d&quot;,i,k);
        }
        i++;
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1061 判断题 (15分)]]></title>
        <id>https://dreammilk.now.sh/1061-pan-duan-ti-15-fen/</id>
        <link href="https://dreammilk.now.sh/1061-pan-duan-ti-15-fen/">
        </link>
        <updated>2020-05-28T04:21:39.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入在第一行给出两个不超过 100 的正整数 N 和 M，分别是学生人数和判断题数量。第二行给出 M 个不超过 5 的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0 代表“非”，1 代表“是”。随后 N 行，每行给出一个学生的解答。数字间均以空格分隔。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>按照输入的顺序输出每个学生的得分，每个分数占一行。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">3 6
2 1 3 3 4 5
0 0 1 0 1 1
0 1 1 0 0 1
1 0 1 0 1 0
1 1 0 0 1 1
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">13
11
12
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目相比于<code>1058 选择题</code>而言，降低了难度：</p>
<blockquote>
<p>准备两个数组，一个存放每个题目的分数，另一个存放每个题目的答案</p>
<p>然后循环学生的解答，答案正确的加分，之后输出当前学生的总分</p>
</blockquote>
<p>整体没有什么难点，基础题目</p>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include&lt;vector&gt;

using namespace std;

int main() {
    int n,m;
    cin &gt;&gt; n &gt;&gt; m;
    vector&lt;int&gt; answer(m),score(m);
    for(int i=0;i&lt;m;i++){
        cin &gt;&gt; score[i];
    }
    for(int i=0;i&lt;m;i++){
        cin &gt;&gt; answer[i];
    }
    for(int i=0;i&lt;n;i++){
        int sum=0;
        for(int j=0;j&lt;m;j++){
            int option; cin &gt;&gt; option;
            if(option == answer[j]) sum += score[j];
        }
        cout &lt;&lt; sum &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1060 爱丁顿数 (25分)]]></title>
        <id>https://dreammilk.now.sh/1060-ai-ding-dun-shu-25-fen/</id>
        <link href="https://dreammilk.now.sh/1060-ai-ding-dun-shu-25-fen/">
        </link>
        <updated>2020-05-27T04:16:08.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” <em>E</em> ，即满足有 <em>E</em> 天骑车超过 <em>E</em> 英里的最大整数 <em>E</em>。据说爱丁顿自己的 <em>E</em> 等于87。</p>
<p>现给定某人 <em>N</em> 天的骑车距离，请你算出对应的爱丁顿数 <em>E</em>（≤<em>N</em>）。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” <em>E</em> ，即满足有 <em>E</em> 天骑车超过 <em>E</em> 英里的最大整数 <em>E</em>。据说爱丁顿自己的 <em>E</em> 等于87。</p>
<p>现给定某人 <em>N</em> 天的骑车距离，请你算出对应的爱丁顿数 <em>E</em>（≤<em>N</em>）。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入第一行给出一个正整数 <em>N</em> (≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>)，即连续骑车的天数；第二行给出 <em>N</em> 个非负整数，代表每天的骑车距离。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>在一行中给出 <em>N</em> 天的爱丁顿数。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">10
6 7 6 9 3 10 8 2 7 8
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">6
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目不要使用傻乎乎的反复遍历：</p>
<blockquote>
<p>首先将输入的数字按从大到小进行排序（从小到大排序不能保证前面的数超过E）</p>
<p>遍历数字，每次遍历时E++，直到当前数字不超过E为止</p>
<p>最后输出E即可</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;

using namespace std;

bool cmp(int a,int b){
    return a&gt;b;
}

int main() {
    int n;
    cin &gt;&gt; n;
    vector&lt;int&gt; v(n);
    for(int i=0;i&lt;n;i++){
        cin &gt;&gt; v[i];
    }
    sort(v.begin(),v.end(),cmp);
    int e=0;
    for(int i=0;i&lt;n;i++){
        if(v[i]&gt;e+1) e++;
        else break;
    }
    cout &lt;&lt; e &lt;&lt; endl;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1059 C语言竞赛 (20分)]]></title>
        <id>https://dreammilk.now.sh/1059-c-yu-yan-jing-sai-20-fen/</id>
        <link href="https://dreammilk.now.sh/1059-c-yu-yan-jing-sai-20-fen/">
        </link>
        <updated>2020-05-26T05:45:07.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽：</p>
<ul>
<li>0、冠军将赢得一份“神秘大奖”（比如很巨大的一本学生研究论文集……）。</li>
<li>1、排名为素数的学生将赢得最好的奖品 —— 小黄人玩偶！</li>
<li>2、其他人将得到巧克力。</li>
</ul>
<p>给定比赛的最终排名以及一系列参赛者的 ID，你要给出这些参赛者应该获得的奖品。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽：</p>
<ul>
<li>0、冠军将赢得一份“神秘大奖”（比如很巨大的一本学生研究论文集……）。</li>
<li>1、排名为素数的学生将赢得最好的奖品 —— 小黄人玩偶！</li>
<li>2、其他人将得到巧克力。</li>
</ul>
<p>给定比赛的最终排名以及一系列参赛者的 ID，你要给出这些参赛者应该获得的奖品。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入第一行给出一个正整数 <em>N</em>（≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>），是参赛者人数。随后 <em>N</em> 行给出最终排名，每行按排名顺序给出一位参赛者的 ID（4 位数字组成）。接下来给出一个正整数 <em>K</em> 以及 <em>K</em> 个需要查询的 ID。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>对每个要查询的 ID，在一行中输出 <code>ID: 奖品</code>，其中奖品或者是 <code>Mystery Award</code>（神秘大奖）、或者是 <code>Minion</code>（小黄人）、或者是 <code>Chocolate</code>（巧克力）。如果所查 ID 根本不在排名里，打印 <code>Are you kidding?</code>（耍我呢？）。如果该 ID 已经查过了（即奖品已经领过了），打印 <code>ID: Checked</code>（不能多吃多占）。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">6
1111
6666
8888
1234
5555
0001
6
8888
0001
1111
2222
8888
2222
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">8888: Minion
0001: Chocolate
1111: Mystery Award
2222: Are you kidding?
8888: Checked
2222: Are you kidding?
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目比较容易：</p>
<blockquote>
<p>可以使用一个数组将对应ID的名次进行存储，对于没有ID的名次置为0</p>
<p>在输出时，进行判断名次是否为0，为0说明查无此人</p>
<p>其他的名次按照题目条件进行判断</p>
<p>对于每一个查过的ID，需要将名次置为-1，避免重复查询</p>
</blockquote>
<p>至于素数的判断可以参考直接<code>1013 数素数</code></p>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

bool judge(int i){
    if(i &lt;= 3) return i &gt; 1;
    if(i%6 != 1 &amp;&amp; i%6 != 5) return false;
    for(int j=2;j*j &lt;= i;j++){
        if(i%j == 0) return false;
    }
    return true;
}

int main() {
    int n;
    cin &gt;&gt; n;
    int ids[10000]={0};
    for(int i=1;i&lt;=n;i++){
        int id;
        cin &gt;&gt; id;
        ids[id] = i;
    }
    int k;
    cin &gt;&gt; k;
    for(int i=0;i&lt;k;i++){
        string id;
        cin &gt;&gt; id;
        if(ids[stoi(id)]==0) cout &lt;&lt; id  &lt;&lt; &quot;: Are you kidding?&quot; &lt;&lt; endl;
        else if(ids[stoi(id)]==-1) cout &lt;&lt; id &lt;&lt; &quot;: Checked&quot; &lt;&lt; endl;
        else{
            if(ids[stoi(id)]==1){
                cout &lt;&lt; id &lt;&lt; &quot;: Mystery Award&quot; &lt;&lt; endl;
                ids[stoi(id)]=-1;
            }
            else if(judge(ids[stoi(id)])){
                cout &lt;&lt; id &lt;&lt; &quot;: Minion&quot; &lt;&lt; endl;
                ids[stoi(id)]=-1;
            }
            else{
                cout &lt;&lt; id &lt;&lt; &quot;: Chocolate&quot; &lt;&lt; endl;
                ids[stoi(id)]=-1;
            }
        }
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1058 选择题 (20分)]]></title>
        <id>https://dreammilk.now.sh/1058-xuan-ze-ti-20-fen/</id>
        <link href="https://dreammilk.now.sh/1058-xuan-ze-ti-20-fen/">
        </link>
        <updated>2020-05-25T05:32:17.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入在第一行给出两个正整数 N（≤ 1000）和 M（≤ 100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 <code>(选中的选项个数 选项1 ……)</code>，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>按照输入的顺序给出每个学生的得分，每个分数占一行。注意判题时只有选择全部正确才能得到该题的分数。最后一行输出错得最多的题目的错误次数和编号（题目按照输入的顺序从 1 开始编号）。如果有并列，则按编号递增顺序输出。数字间用空格分隔，行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 <code>Too simple</code>。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">3 4 
3 4 2 a c
2 5 1 b
5 3 2 b c
1 5 4 a b d e
(2 a c) (2 b d) (2 a c) (3 a b e)
(2 a c) (1 b) (2 a b) (4 a b d e)
(2 b d) (1 e) (2 b c) (4 a b c d)
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">3
6
5
2 2 3 4
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目的难度有点高，先梳理一下结构：</p>
<blockquote>
<p>对于每题的选项使用set结构存储，因为每个选项不会重复并自动排序，可以直接比较正确选项与学生选项</p>
<p>每题再使用vector结构存储，可以循环遍历每题的答案</p>
<p>每题做错人数也使用vector结构存储，最后循环遍历出最大值</p>
<p>每题的分数使用vector储存可以方便统计分数</p>
</blockquote>
<p>再说一下题目逻辑：</p>
<blockquote>
<p>循环存储每题的分数和正确选项数，通过正确选项数，循环存储每题的正确选项</p>
<p>对于学生选项先获取选中个数，然后通过循环存储学生选项，对比两个set变量是否相等</p>
<p>如果相等就加分，否则该题做错人数加一</p>
<p>最后通过循环错题人数获取最大值，然后再循环一次找出这些错题（做错人数为最大值的题目）</p>
</blockquote>
<p>题目核心还是在于如何存储这些数据：</p>
<blockquote>
<p>本题输入函数推荐使用scanf函数，避免使用cin</p>
<p>因为题目涉及到的输入的代码比较多，cin可能会影响效率，并且在格式化输入上表现不佳</p>
<p>在输入时，首当其冲的细节是需要消除换行的回车<code>\n</code>符号，否则会引起莫名其妙的程序错误</p>
<p>其次，在捕获选项字符时，需要留意中间的空格，避免<code>%c</code>储存空格字符</p>
</blockquote>
<p>写的时候完全理不清思路，在存储数据上面不停的栽跟头，感觉写到现在水平依然处于入门阶段😭</p>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;cstdio&gt;
#include &lt;vector&gt;
#include &lt;set&gt;

using namespace std;

int main() {
    int m,n,cnt;
    char c;
    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
    vector&lt;int&gt; score(m),error(m);
    vector&lt;set&lt;char&gt;&gt; options(m);
    for(int i=0;i&lt;m;i++){
        scanf(&quot;\n&quot;);
        scanf(&quot;%d%*d%d&quot;,&amp;score[i],&amp;cnt);
        for(int j=0;j&lt;cnt;j++){
            scanf(&quot; %c&quot;,&amp;c);
            options[i].insert(c);
        }
    }
    for(int i=0;i&lt;n;i++){
        int num = 0;
        scanf(&quot;\n&quot;);
        for(int j=0;j&lt;m;j++){
            if(j!=0) scanf(&quot; &quot;);
            set&lt;char&gt; ans;
            scanf(&quot;(%d&quot;,&amp;cnt);
            for(int k=0;k&lt;cnt;k++){
                scanf(&quot; %c&quot;,&amp;c);
                ans.insert(c);
            }
            scanf(&quot;)&quot;);
            if(ans == options[j]){
                num += score[j];
            }else{
                error[j] ++;
            }
        }
        printf(&quot;%d\n&quot;,num);
    }
    int max_error = 0;
    for(int i=0;i&lt;m;i++){
        if(error[i] &gt; max_error) max_error=error[i];
    }
    if(max_error==0) printf(&quot;Too simple&quot;);
    else{
        printf(&quot;%d&quot;,max_error);
        for(int i=0;i&lt;m;i++){
            if(error[i] == max_error) printf(&quot; %d&quot;,i+1);
        }
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>