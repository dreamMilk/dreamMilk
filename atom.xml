<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dreammilk.now.sh</id>
    <title>Milk &apos;s Home</title>
    <updated>2021-01-27T08:51:22.285Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dreammilk.now.sh"/>
    <link rel="self" href="https://dreammilk.now.sh/atom.xml"/>
    <subtitle>welcome</subtitle>
    <logo>https://dreammilk.now.sh/images/avatar.png</logo>
    <icon>https://dreammilk.now.sh/favicon.ico</icon>
    <rights>All rights reserved 2021, Milk &apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[1092 最好吃的月饼 (20分)]]></title>
        <id>https://dreammilk.now.sh/1092-zui-hao-chi-de-yue-bing-20-fen/</id>
        <link href="https://dreammilk.now.sh/1092-zui-hao-chi-de-yue-bing-20-fen/">
        </link>
        <updated>2020-06-26T04:50:53.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。</p>
<figure data-type="image" tabindex="1"><img src="https://images.ptausercontent.com/fcb325a0-7090-4bf4-acb0-d4d7ea832f27.jpg" alt="mk.jpg" loading="lazy"></figure>
<p>若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。</p>
<figure data-type="image" tabindex="1"><img src="https://images.ptausercontent.com/fcb325a0-7090-4bf4-acb0-d4d7ea832f27.jpg" alt="mk.jpg" loading="lazy"></figure>
<p>若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入首先给出两个正整数 <em>N</em>（≤1000）和 <em>M</em>（≤100），分别为月饼的种类数（于是默认月饼种类从 1 到 <em>N</em> 编号）和参与统计的城市数量。</p>
<p>接下来 <em>M</em> 行，每行给出 <em>N</em> 个非负整数（均不超过 1 百万），其中第 <em>i</em> 个整数为第 <em>i</em> 种月饼的销量（块）。数字间以空格分隔。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">5 3
1001 992 0 233 6
8 0 2018 0 2008
36 18 0 1024 4
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">2018
3 5
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目比较容易，没有什么复杂的逻辑处理：</p>
<blockquote>
<p>使用<code>vector</code>数组保存每种月饼的总销量，通过依次遍历输入数据进行相加即可</p>
<p>在统计的时候，同时记录最大值为多少（下面写法在此有所出入）</p>
<p>最后输出时，按照要求打印输出总销量为最大值的月饼编号</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

using namespace std;

int main() {
    int n,m;
    cin &gt;&gt; n &gt;&gt; m;
    vector&lt;int&gt; v(n,0);
    for(int i=0;i&lt;m;i++){
        for(int j=0;j&lt;n;j++){
            int num;
            cin &gt;&gt; num;
            v[j] += num;
        }
    }
    int max_n=*max_element(v.begin(),v.end());
    bool flag = false;
    cout &lt;&lt; max_n &lt;&lt; endl;
    for(int i=0;i&lt;n;i++){
        if(v[i]==max_n){
            if(!flag){
                printf(&quot;%d&quot;,i+1);
                flag = true;
            }
            else printf(&quot; %d&quot;,i+1);
        }
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1091 N-自守数 (15分)]]></title>
        <id>https://dreammilk.now.sh/1091-n-zi-shou-shu-15-fen/</id>
        <link href="https://dreammilk.now.sh/1091-n-zi-shou-shu-15-fen/">
        </link>
        <updated>2020-06-25T04:43:52.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>如果某个数 <em>K</em> 的平方乘以 <em>N</em> 以后，结果的末尾几位数等于 <em>K</em>，那么就称这个数为“<em>N</em>-自守数”。例如 3×922=25392，而 25392 的末尾两位正好是 92，所以 92 是一个 3-自守数。</p>
<p>本题就请你编写程序判断一个给定的数字是否关于某个 <em>N</em> 是 <em>N</em>-自守数。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>如果某个数 <em>K</em> 的平方乘以 <em>N</em> 以后，结果的末尾几位数等于 <em>K</em>，那么就称这个数为“<em>N</em>-自守数”。例如 3×922=25392，而 25392 的末尾两位正好是 92，所以 92 是一个 3-自守数。</p>
<p>本题就请你编写程序判断一个给定的数字是否关于某个 <em>N</em> 是 <em>N</em>-自守数。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入在第一行中给出正整数 <em>M</em>（≤20），随后一行给出 <em>M</em> 个待检测的、不超过 1000 的正整数。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>对每个需要检测的数字，如果它是 <em>N</em>-自守数就在一行中输出最小的 <em>N</em> 和  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><msup><mi>K</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">NK^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 的值，以一个空格隔开；否则输出 <code>No</code>。注意题目保证 <em>N</em>&lt;10。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">3
92 5 233
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">3 25392
1 25
No
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目思路比较简单：</p>
<blockquote>
<p>先对输入的每一个数进行判断是几位数，然后按照要求计算结果，通过<code>%</code>取模的方式得到相应尾数进行比较</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

int main() {
    int m;
    cin &gt;&gt; m;
    for(int i=0;i&lt;m;i++){
        int num,div,j;
        cin &gt;&gt; num;
        if(num/100&gt;0) div=1000;
        else if(num/10&gt;0) div=100;
        else div = 10;
        for(j=1;j&lt;10;j++){
            int result = j*num*num;
            if(result%div == num){
                printf(&quot;%d %d\n&quot;,j,result);
                break;
            }
        }
        if(j==10) printf(&quot;No\n&quot;);
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1088 三人行 (20分)]]></title>
        <id>https://dreammilk.now.sh/1088-san-ren-xing-20-fen/</id>
        <link href="https://dreammilk.now.sh/1088-san-ren-xing-20-fen/">
        </link>
        <updated>2020-06-24T04:16:40.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”</p>
<p>本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”</p>
<p>本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 <code>Cong</code>；平等则输出 <code>Ping</code>；比你弱则输出 <code>Gai</code>。其间以 1 个空格分隔，行首尾不得有多余空格。</p>
<p>注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 <code>No Solution</code>。</p>
</blockquote>
<h3 id="输入样例1">输入样例1：</h3>
<pre><code class="language-in">48 3 7
</code></pre>
<h3 id="输出样例1">输出样例1：</h3>
<pre><code class="language-out">48 Ping Cong Gai
</code></pre>
<h3 id="输入样例2">输入样例2：</h3>
<pre><code class="language-in">48 11 6
</code></pre>
<h3 id="输出样例2">输出样例2：</h3>
<pre><code class="language-out">No Solution
</code></pre>
<h3 id="思路">思路：</h3>
<p>因为题目没有明确的数值规律，直接使用遍历进行求解：</p>
<blockquote>
<p>因为以最大解为准，所以使用反向遍历[10，99]，对符合要求的数值再按照题目逻辑进行判断</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cmath&gt;

using namespace std;

void judge(int m,double p){
    if(m &gt; p) cout &lt;&lt; &quot; Gai&quot;;
    else if(m == p) cout &lt;&lt; &quot; Ping&quot;;
    else cout &lt;&lt; &quot; Cong&quot;;
}

int main() {
    int m,x,y,i;
    cin &gt;&gt; m &gt;&gt; x &gt;&gt; y;
    for(i=99;i&gt;=10;i--){
        int yi = i%10*10+i/10;
        double bin = yi*1.0/y;
        if(abs(i-yi) == bin*x){
            cout &lt;&lt; i;
            judge(m,i);
            judge(m,yi);
            judge(m,bin);
            break;
        }
    }
    if(i&lt;10) cout &lt;&lt; &quot;No Solution&quot;;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1087 有多少不同的值 (20分)]]></title>
        <id>https://dreammilk.now.sh/1087-you-duo-shao-bu-tong-de-zhi-20-fen/</id>
        <link href="https://dreammilk.now.sh/1087-you-duo-shao-bu-tong-de-zhi-20-fen/">
        </link>
        <updated>2020-06-23T03:54:14.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>当自然数 <em>n</em> 依次取 1、2、3、……、<em>N</em> 时，算式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor n/2 \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌋</span></span></span></span>+<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>3</mn><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor n/3 \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">3</span><span class="mclose">⌋</span></span></span></span>+<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>5</mn><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor n/5 \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">5</span><span class="mclose">⌋</span></span></span></span> 有多少个不同的值？（注：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>n</mi><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor n \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mclose">⌋</span></span></span></span> 为取整函数，表示不超过 <em>x</em> 的最大自然数，即 <em>x</em> 的整数部分。）</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>当自然数 <em>n</em> 依次取 1、2、3、……、<em>N</em> 时，算式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor n/2 \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌋</span></span></span></span>+<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>3</mn><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor n/3 \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">3</span><span class="mclose">⌋</span></span></span></span>+<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>5</mn><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor n/5 \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">5</span><span class="mclose">⌋</span></span></span></span> 有多少个不同的值？（注：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⌊</mo><mi>n</mi><mo>⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor n \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mclose">⌋</span></span></span></span> 为取整函数，表示不超过 <em>x</em> 的最大自然数，即 <em>x</em> 的整数部分。）</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入给出一个正整数 <em>N</em>（2≤<em>N</em>≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>）。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>在一行中输出题面中算式取到的不同值的个数。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">2017
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">1480
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目中提到了“不同”，二话不说<code>set</code>结构：</p>
<blockquote>
<p>将所有结果使用<code>set</code>存储，最后输出<code>set</code>的大小即为所求</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;set&gt;

using namespace std;

int main() {
    int n;
    cin &gt;&gt; n;
    set&lt;int&gt; s;
    for(int i=1;i&lt;=n;i++){
        s.insert(i/2+i/3+i/5);
    }
    cout &lt;&lt; s.size();
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1086 就不告诉你 (15分)]]></title>
        <id>https://dreammilk.now.sh/1086-jiu-bu-gao-su-ni-15-fen/</id>
        <link href="https://dreammilk.now.sh/1086-jiu-bu-gao-su-ni-15-fen/">
        </link>
        <updated>2020-06-22T04:07:56.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。</p>
<figure data-type="image" tabindex="1"><img src="https://images.ptausercontent.com/0c3a4497-27c3-45ea-9c8e-5a1ab2df48af.jpg" alt="53.jpg" loading="lazy"></figure>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。</p>
<figure data-type="image" tabindex="1"><img src="https://images.ptausercontent.com/0c3a4497-27c3-45ea-9c8e-5a1ab2df48af.jpg" alt="53.jpg" loading="lazy"></figure>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>在一行中倒着输出 A 和 B 的乘积。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">5 7
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">53
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目输出两个数字乘积的倒序：</p>
<blockquote>
<p>唯一需要注意的地方是乘积倒序后开头为0的情况，需要跳过这些0，从第一个非0数字开始输出</p>
</blockquote>
<p>剩余的就是<code>%10</code>的基本操作</p>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

int main() {
    int a,b,mul,num;
    cin &gt;&gt; a &gt;&gt; b;
    mul = a*b;
    bool flag = true;
    while(mul!=0){
        num = mul%10;
        if(num != 0){
            cout &lt;&lt; num;
            flag=false;
        }
        else if(!flag) cout &lt;&lt; num;
        mul /=10;
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1085 PAT单位排行 (25分)]]></title>
        <id>https://dreammilk.now.sh/1085-pat-dan-wei-pai-xing-25-fen/</id>
        <link href="https://dreammilk.now.sh/1085-pat-dan-wei-pai-xing-25-fen/">
        </link>
        <updated>2020-06-21T04:20:02.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>每次 PAT 考试结束后，考试中心都会发布一个考生单位排行榜。本题就请你实现这个功能。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>每次 PAT 考试结束后，考试中心都会发布一个考生单位排行榜。本题就请你实现这个功能。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入第一行给出一个正整数 N（≤<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>），即考生人数。随后 N 行，每行按下列格式给出一个考生的信息：</p>
<pre><code class="language-markdown">准考证号 得分 学校
</code></pre>
<p>其中<code>准考证号</code>是由 6 个字符组成的字符串，其首字母表示考试的级别：<code>B</code>代表乙级，<code>A</code>代表甲级，<code>T</code>代表顶级；<code>得分</code>是 [0, 100] 区间内的整数；<code>学校</code>是由不超过 6 个英文字母组成的单位码（大小写无关）。注意：题目保证每个考生的准考证号是不同的。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>首先在一行中输出单位个数。随后按以下格式非降序输出单位的排行榜：</p>
<pre><code class="language-markdown">排名 学校 加权总分 考生人数
</code></pre>
<p>其中<code>排名</code>是该单位的排名（从 1 开始）；<code>学校</code>是全部按小写字母输出的单位码；<code>加权总分</code>定义为<code>乙级总分/1.5 + 甲级总分 + 顶级总分*1.5</code>的<strong>整数部分</strong>；<code>考生人数</code>是该属于单位的考生的总人数。</p>
<p>学校首先按加权总分排行。如有并列，则应对应相同的排名，并按考生人数升序输出。如果仍然并列，则按单位码的字典序输出。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">10
A57908 85 Au
B57908 54 LanX
A37487 60 au
T28374 67 CMU
T32486 24 hypu
A66734 92 cmu
B76378 71 AU
A47780 45 lanx
A72809 100 pku
A03274 45 hypu
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">5
1 cmu 192 2
1 au 192 3
3 pku 100 1
4 hypu 81 2
4 lanx 81 2
</code></pre>
<h3 id="思路">思路：</h3>
<p>读题感觉难度不高，写起来真费脑子🧠：</p>
<blockquote>
<p>首先选择使用两个<code>map</code>结构分别存放考生人数与学校加权总分，使用<code>vector</code>存放最后输出内容</p>
<p>学校名称需要统一小写后存放，然后根据考试级别统计各学校加权总分，于是得到了两个<code>map</code>的数据</p>
<p>然后根据两个<code>map</code>数据统计每个学校<code>名字 加权总分 考生人数</code>汇总到<code>vector</code>中</p>
<p>接着根据题目提供的排序逻辑进行排序，然后通过判断语句输出相应的排名数</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;cctype&gt;
#include &lt;algorithm&gt;

using namespace std;

struct node{
    string name;
    int score=0,number=0;
};

bool cmp(node a,node b){
    if(a.score!=b.score) return a.score&gt;b.score;
    else if(a.number!=b.number) return a.number&lt;b.number;
    else return a.name&lt;b.name;
}

int main() {
    int n;
    cin &gt;&gt; n;
    map&lt;string,int&gt; cnt;
    map&lt;string,float&gt; s;
    vector&lt;node&gt; v;
    for(int i=0;i&lt;n;i++){
        string tid,school;
        float score;
        cin &gt;&gt; tid &gt;&gt; score &gt;&gt; school;
        for(int j=0;j&lt;school.length();j++)
        {
            school[j] = tolower(school[j]);
        }
        if(tid[0]=='A') s[school] += score;
        if(tid[0]=='B') s[school] += score/1.5;
        if(tid[0]=='T') s[school] += score*1.5;
        cnt[school]++;
    }
    for(auto it=s.begin();it!=s.end();it++){
        node no;
        no.name=it-&gt;first;
        no.number=cnt[no.name];
        no.score=it-&gt;second;
        v.push_back(no);
    }
    sort(v.begin(),v.end(),cmp);
    cout &lt;&lt; v.size() &lt;&lt; endl;
    int temp=-1;int Rank=1;
    for(int i=0;i&lt;v.size();i++){
        if(v[i].score!=temp){
            Rank = i+1;
            temp = v[i].score;
        }
        cout &lt;&lt; Rank &lt;&lt; ' ' &lt;&lt; v[i].name &lt;&lt; ' ' &lt;&lt; v[i].score &lt;&lt; ' ' &lt;&lt; v[i].number &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[需复盘]1084 外观数列 (20分)]]></title>
        <id>https://dreammilk.now.sh/xu-fu-pan-1084-wai-guan-shu-lie-20-fen/</id>
        <link href="https://dreammilk.now.sh/xu-fu-pan-1084-wai-guan-shu-lie-20-fen/">
        </link>
        <updated>2020-06-20T04:10:56.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>外观数列是指具有以下特点的整数序列：</p>
<pre><code>d, d1, d111, d113, d11231, d112213111, ...
</code></pre>
<p>它从不等于 1 的数字 <code>d</code> 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 <code>d</code>，所以就是 <code>d1</code>；第 2 项是 1 个 <code>d</code>（对应 <code>d1</code>）和 1 个 1（对应 11），所以第 3 项就是 <code>d111</code>。又比如第 4 项是 <code>d113</code>，其描述就是 1 个 <code>d</code>，2 个 1，1 个 3，所以下一项就是 <code>d11231</code>。当然这个定义对 <code>d</code> = 1 也成立。本题要求你推算任意给定数字 <code>d</code> 的外观数列的第 N 项。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>外观数列是指具有以下特点的整数序列：</p>
<pre><code>d, d1, d111, d113, d11231, d112213111, ...
</code></pre>
<p>它从不等于 1 的数字 <code>d</code> 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 <code>d</code>，所以就是 <code>d1</code>；第 2 项是 1 个 <code>d</code>（对应 <code>d1</code>）和 1 个 1（对应 11），所以第 3 项就是 <code>d111</code>。又比如第 4 项是 <code>d113</code>，其描述就是 1 个 <code>d</code>，2 个 1，1 个 3，所以下一项就是 <code>d11231</code>。当然这个定义对 <code>d</code> = 1 也成立。本题要求你推算任意给定数字 <code>d</code> 的外观数列的第 N 项。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入第一行给出 [0,9] 范围内的一个整数 <code>d</code>、以及一个正整数 N（≤ 40），用空格分隔。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>在一行中给出数字 <code>d</code> 的外观数列的第 N 项。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">1 8
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">1123123111
</code></pre>
<h3 id="思路">思路：</h3>
<p>目前没有理解为什么会出现测试点无法通过的点</p>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

int main() {
    int n;
    string d;
    cin &gt;&gt; d &gt;&gt; n;
    for(int i=1;i&lt;n;i++){
        string str=&quot;&quot;;
        char temp = d[0];int cnt = 1;
        for(int j=1;j&lt;d.length();j++){
            if(d[j]==temp) cnt++;
            else{
                str = str+temp+char('0'+cnt);
                cnt = 1;
                temp=d[j];
            }
        }
        str = str+temp+char('0'+cnt);
        d = str;
    }
    cout &lt;&lt; d &lt;&lt; endl;
    return 0;
}
</code></pre>
<p>修改后：</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

int main() {
    string s;
    int n, j;
    cin &gt;&gt; s &gt;&gt; n;
    for (int cnt = 1; cnt &lt; n; cnt++) {
        string t;
        for (int i = 0; i &lt; s.length(); i = j) {
            for (j = i; j &lt; s.length() &amp;&amp; s[j] == s[i]; j++);
            t += s[i] + to_string(j - i);
        }
        s = t;
    }
    cout &lt;&lt; s;
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1083 是否存在相等的差 (20分)]]></title>
        <id>https://dreammilk.now.sh/1083-shi-fou-cun-zai-xiang-deng-de-chai-20-fen/</id>
        <link href="https://dreammilk.now.sh/1083-shi-fou-cun-zai-xiang-deng-de-chai-20-fen/">
        </link>
        <updated>2020-06-19T04:03:03.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>给定 N 张卡片，正面分别写上 1、2、……、N，然后全部翻面，洗牌，在背面分别写上 1、2、……、N。将每张牌的正反两面数字相减（大减小），得到 N 个非负差值，其中是否存在相等的差？</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>给定 N 张卡片，正面分别写上 1、2、……、N，然后全部翻面，洗牌，在背面分别写上 1、2、……、N。将每张牌的正反两面数字相减（大减小），得到 N 个非负差值，其中是否存在相等的差？</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入第一行给出一个正整数 N（2 ≤ N ≤ 10 000），随后一行给出 1 到 N 的一个洗牌后的排列，第 i 个数表示正面写了 i 的那张卡片背面的数字。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>按照“差值 重复次数”的格式从大到小输出重复的差值及其重复的次数，每行输出一个结果。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">8
3 5 8 6 2 1 4 7
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">5 2
3 3
2 2
</code></pre>
<h3 id="思路">思路：</h3>
<p>需要统计出现次数，使用<code>vector</code>统计：</p>
<blockquote>
<p>因为数字范围为[1，N]，所以两个数的差值也会落在这个区间内，开辟一个相同区间大小的数组</p>
<p>在数组中将每一个差值作为下标进行存放然后计数</p>
<p>最后反向遍历数组，输出对应下标与数值即可</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;vector&gt;

using namespace std;

int main() {
    int n;
    cin &gt;&gt; n;
    vector&lt;int&gt; v(n);
    for(int i=1;i&lt;=n;i++){
        int m;
        cin &gt;&gt; m;
        int sub = m-i&gt;0?m-i:i-m;
        v[sub]++;
    }
    for(int i=n-1;i&gt;=0;i--){
        if(v[i] &gt; 1) cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; v[i] &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1082 射击比赛 (20分)]]></title>
        <id>https://dreammilk.now.sh/1082-she-ji-bi-sai-20-fen/</id>
        <link href="https://dreammilk.now.sh/1082-she-ji-bi-sai-20-fen/">
        </link>
        <updated>2020-06-18T04:07:31.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入在第一行中给出一个正整数 N（≤ 10 000）。随后 N 行，每行按下列格式给出：</p>
<pre><code>ID x y
</code></pre>
<p>其中 <code>ID</code> 是运动员的编号（由 4 位数字组成）；<code>x</code> 和 <code>y</code> 是其打出的弹洞的平面坐标(<code>x</code>,<code>y</code>)，均为整数，且 0 ≤ |<code>x</code>|, |<code>y</code>| ≤ 100。题目保证每个运动员的编号不重复，且每人只打 1 枪。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>输出冠军和菜鸟的编号，中间空 1 格。题目保证他们是唯一的。</p>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">3
0001 5 7
1020 -1 3
0233 0 -1
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">0233 0001
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目主要还是找最大最小值：</p>
<blockquote>
<p>对于距离还是直接使用<code>x*x+y*y</code>进行比较</p>
<p>找到最大最小值时需要保存他们的id</p>
<p>最后直接输出最小值id与最大值id</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

int main() {
    int n,MAX=0,MIN=10000,maxid,minid;
    cin &gt;&gt; n;
    for(int i=0;i&lt;n;i++){
        int id,x,y,length;
        cin &gt;&gt; id &gt;&gt; x &gt;&gt; y;
        length = x*x+y*y;
        if(length &gt; MAX){
            MAX = length;
            maxid = id;
        }
        if(length &lt; MIN){
            MIN = length;
            minid = id;
        }
    }
    printf(&quot;%04d %04d&quot;,minid,maxid);
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1081 检查密码 (15分)]]></title>
        <id>https://dreammilk.now.sh/1081-jian-cha-mi-ma-15-fen/</id>
        <link href="https://dreammilk.now.sh/1081-jian-cha-mi-ma-15-fen/">
        </link>
        <updated>2020-06-17T04:16:44.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于6个字符组成，并且只能有英文字母、数字和小数点 <code>.</code>，还必须既有字母也有数字。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<h3 id="题目">题目</h3>
<blockquote>
<p>本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于6个字符组成，并且只能有英文字母、数字和小数点 <code>.</code>，还必须既有字母也有数字。</p>
</blockquote>
<!-- more -->
<h3 id="输入格式">输入格式：</h3>
<blockquote>
<p>输入第一行给出一个正整数 N（≤ 100），随后 N 行，每行给出一个用户设置的密码，为不超过 80 个字符的非空字符串，以回车结束。</p>
</blockquote>
<h3 id="输出格式">输出格式：</h3>
<blockquote>
<p>对每个用户的密码，在一行中输出系统反馈信息，分以下5种：</p>
<ul>
<li>如果密码合法，输出<code>Your password is wan mei.</code>；</li>
<li>如果密码太短，不论合法与否，都输出<code>Your password is tai duan le.</code>；</li>
<li>如果密码长度合法，但存在不合法字符，则输出<code>Your password is tai luan le.</code>；</li>
<li>如果密码长度合法，但只有字母没有数字，则输出<code>Your password needs shu zi.</code>；</li>
<li>如果密码长度合法，但只有数字没有字母，则输出<code>Your password needs zi mu.</code>。</li>
</ul>
</blockquote>
<h3 id="输入样例">输入样例：</h3>
<pre><code class="language-in">5
123s
zheshi.wodepw
1234.5678
WanMei23333
pass*word.6
</code></pre>
<h3 id="输出样例">输出样例：</h3>
<pre><code class="language-out">Your password is tai duan le.
Your password needs shu zi.
Your password needs zi mu.
Your password is wan mei.
Your password is tai luan le.
</code></pre>
<h3 id="思路">思路：</h3>
<p>题目的输出格式将逻辑展示的非常清楚：</p>
<blockquote>
<p>对每一个字符串，首先判断字符长度，过短则输出</p>
<p>对字符串的每一个字符进行判断，使用<code>bool</code>变量检测数字和字母是否出现（在字符遍历完后判断）</p>
<p>如果出现不规范的字符则直接停止字符遍历，进行输出；否则继续遍历</p>
</blockquote>
<p>注意一点：</p>
<blockquote>
<p>题目虽然没有明确提醒输入时会有空格，但是需要考虑这种情况，避免测试点无法通过</p>
</blockquote>
<h4 id="于是代码如下">于是代码如下：</h4>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cctype&gt;

using namespace std;

int main() {
    int n;
    scanf(&quot;%d\n&quot;,&amp;n);
    for(int i=0;i&lt;n;i++){
        string str;
        getline(cin,str);
        if(str.length() &lt; 6){
            cout &lt;&lt; &quot;Your password is tai duan le.&quot; &lt;&lt; endl;
            continue;
        }
        else{
            int j;
            bool number=true,alpha=true;
            for(j=0;j&lt;str.length();j++){
                if(isdigit(str[j])) number=false;
                else if(isalpha(str[j])) alpha = false;
                else if(str[j]=='.') continue;
                else{
                    cout &lt;&lt; &quot;Your password is tai luan le.&quot; &lt;&lt; endl;
                    break;
                }
            }
            if(j!=str.length()) continue;
            if(number){
                cout &lt;&lt; &quot;Your password needs shu zi.&quot; &lt;&lt; endl;
                continue;
            }
            if(alpha){
                cout &lt;&lt; &quot;Your password needs zi mu.&quot; &lt;&lt; endl;
                continue;
            }
            cout &lt;&lt; &quot;Your password is wan mei.&quot; &lt;&lt; endl;
        }
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>